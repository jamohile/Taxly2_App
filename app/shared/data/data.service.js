"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var config_1 = require("../config");
var datayear_1 = require("../data/datayear/datayear");
var DataService = DataService_1 = (function () {
    function DataService(http) {
        this.http = http;
        //a year can be statically saved, for transfer between pages
        this.month_names = [
            "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
        ];
    }
    DataService.prototype.load = function (year, successful) {
        var headers = new http_1.Headers();
        headers.append('auth_token', config_1.Config.token);
        this.http.get(config_1.Config.url + "data/" + year, { headers: headers }).toPromise().then(function (response) {
            var dataYear = new datayear_1.DataYear(response._body.year, response._body.fields, response._body.months);
            successful(dataYear);
        });
    };
    DataService.prototype.save = function (successful) {
        var headers = new http_1.Headers();
        headers.append('auth_token', config_1.Config.token);
        headers.append('mode', 'update');
        this.http.post(config_1.Config.url + "data/" + DataService_1.dataYear.year, DataService_1.dataYear, { headers: headers }).toPromise().then(function (response) {
            successful();
        });
    };
    DataService.prototype.getMonth = function (month_name) {
        for (var x = 0; x < DataService_1.dataYear.months.length; x++) {
            var month = DataService_1.dataYear.months[x];
            if (month.month == month_name) {
                return month;
            }
        }
    };
    DataService.prototype.addMonth = function (newDataMonth) {
        this.removeDuplicateMonth(newDataMonth.month);
        DataService_1.dataYear.months.push(newDataMonth);
    };
    DataService.prototype.removeDuplicateMonth = function (month) {
        DataService_1.dataYear.months.forEach(function (dataMonth) {
            if (dataMonth.month == month) {
                DataService_1.dataYear.months.splice(DataService_1.dataYear.months.indexOf(dataMonth), 1);
                return;
            }
        });
    };
    DataService.prototype.setYearForTransport = function (dataYear) {
        DataService_1.dataYear = dataYear;
    };
    DataService.prototype.getYearFromTransport = function () {
        return DataService_1.dataYear;
    };
    DataService.prototype.setBulkObject = function (name, object) {
        DataService_1.bulk[name] = object;
    };
    DataService.prototype.getBulkObject = function (name, remove) {
        console.log(name);
        console.dir(DataService_1.bulk[name]);
        var object = DataService_1.bulk[name];
        if (remove) {
            delete DataService_1.bulk[name];
        }
        return object;
    };
    DataService.prototype.hasBulkObject = function (name) {
        return DataService_1.bulk[name] != undefined;
    };
    DataService.prototype.changeFieldName = function (old, changed) {
        DataService_1.dataYear.fields.forEach(function (field) {
            if (field.name == old) {
                field.name = changed;
            }
        });
        DataService_1.dataYear.months.forEach(function (month) {
            month.fields.forEach(function (field) {
                if (field.name == old) {
                    field.name = changed;
                }
            });
        });
    };
    return DataService;
}());
//used to transfer open-ended data between pages
DataService.bulk = new Object();
DataService = DataService_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], DataService);
exports.DataService = DataService;
var DataService_1;
//# sourceMappingURL=data:application/json;base64,